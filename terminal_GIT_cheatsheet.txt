
Simple cammands WINDOWS:
cd (you can change directory)
cd .. (back one directory)
ls (see all files in directory)
pwd (show directory)
start . (opens Directory/opens file)
clear (clear terminal)
touch (create file)
mkdir (make folders/directories)
rm (delete files)
rm -rf (deletes folder)
cat <filename> (displays file data in terminal)

GIT COMMANDS:
git config user.name(Shows user name)
git config --global user.name "name name" (Sets global user name, remove --global to just use it for current git directory)
git config user.email(Shows email,)
git config --global user.email "email" (Sets user email, remove --global to just use it for currenct git directory)


------------------------------------------------------------

1. git status (shows all info about the current repo,which branch you're currently on,
which files have been modified, added, or deleted since the last commit
which files are staged and ready to be committed
any untracked files that are not yet being tracked by Git)

-----------------------------------------------------------------

2.git init(initialize git repo)

------------------------------------------------------------------

3.git log (shows you all the commits, branches of the commits and shows you who commited them )
tags:
--oneline (shortens the long git ref but still shows all the commits with the message and branches of teh commits)

-------------------------------------------------------------------

4. git restore . (removes all unstaged data completly, basically a clean wipe{will not affect staged data})
but can be used to restore a file to prev version with {git restore --source=<commitID> file.txt}, if you use restore on a file you restored to prev version
then it will revert to last commit.
)
tags:
 --source=<commitID> file.txt( can be used to restore a file to prev version, if you use restore on a file you restored to prev version
then it will revert to last commit.)

--staged <filename> (removes file from staging area)


----------------------------------------------------------------------------------------------------

5.git add <file> (staging the files/folders of your choice, this is the first step to commiting,  ALSO NOTE: if you staged a file and then change ANYTHING the staged version
will not be affected unless you unstage it)


----------------------------------------------------------------------

6.git reset(reverts back to prev commits of your choosing)
tags:
<commitid> (This will do a soft reset, meaning the commits you've done after the chosen commit will be lost but the changed data will be kept)
--hard  (removes ALL changes and reverts back to the beginning of current commit) 
--hard <commitid>( goes to a specific commit while removing the data and all the commits after the chosen commit)


-------------------------------------------------------------------------

7.git clean -f(removes all untracked files)
git clean -n (views all untracked files that will be deleted)

------------------------------------------------------------------

8.git commit <tags> (basically groups all the chosen changes to the repo and makes a checkpoint,
almost the same as saving but git does not save, only remembers the chosen files/folders
that was added and commited, without -m it will open another editor)
tag:
-m (for messages)
-am (commits all files that is being watched without staging them, but you have to had commited
them before)
--amend (for mistakes, if u messed up on the prev commit like the message or forgot to 
stage a file, then just stage them and run this, u can retype the message and commit the new staged
it)
--amend -m "message" --no-edit (will amend with the new message and wont open editor)

----------------------------------------------------

9.git rm --cached <file>(removes files/folders from staging area that were staged with "git add" AND it will no longer track them  )

------------------------------------------------------------------------------------

10. git branch (shows all the branches of the repository)
tags:
<name> (makes a new branch{BUT IT DOES NOT SWITCH TO IT})
 -D <name> (delete branch but be careful since it uses --force)
 -m <name> (Rename branch, used like "-m <old branch> <new branch>)
 -v (gives more info like last commits on all branches)

-------------------------------------------------------------------------------------

11.git switch <branch>(switches to a specific branch, also can be used to undo detached head)

tags:
-c <branch name> (Makes AND switches to that branch)
<commit ref> (you can instead switch to a diff commit you made in the past, does not result in a detached head)
-- (will switch to prev branch)

---------------------------------------------------------------------------------------

12.git merge <branch name> (OH BOY. ok the current HEAD branch merges with the <branch name>.
A fast forward merge is a merge where the SELECTED HEAD does not have any commits when you merge it with
<branch name> that has commits{ it simply catches up})
(a non fast forward merge is if the HEAD branch has commits after the creation of the branch
that we are merging with. This might cause merge conflicts)
(When resolving conflicts,after resolving you need to add and commit again to save your fix then everything is merged correctly)

--------------------------------------------------------------------------------------------------

13.git diff (shows the diff between files. If you run this as is then it will show you the diff between your last commit and the current UNSTAGED saved files, also it does not show
for untracked files)
(NOTE:USE THIS ON GIT KRAKEN OR AN ENLARGED GIT BASH TERMINAL. The screen will bug out and not show you
all the details in a small terminal)

TAGS:
HEAD (shows the same as the above BUT for every change since your last commit even staged changes but still not for the untracked files)
--staged/--cached (shows you the diff between last commit and all the STAGED files)
<filename> (you can choose which file to see differences, can be used with --staged and HEAD to be specific)
branch1..branch2 (shows diff between branches)
commit1..commit2 (this should be in ref form, so basically (f4223r43..fewe32fewef) as an example but this will show you the diff between two commits)


git --no-pager diff (run this if the terminal does not show all details)


--------------------------------------------------------------------------------------------------------------

14.git stash (stores staged and unstaged files in the stash and remove all changes, can use stash multiple times back to back.)
TAGS:
list (shows all stashes in the directory)
pop (brings out everything from the stash and removes the stash)
apply (applies everything from the stash but it does not remove it from stash can be used with stash ID to specify)
--include-untracked(stashes untracked files)
push -m <message> (makes a new stash with a message)
clear (removes all stashes)
drop (delete a specific stash)


----------------------------------------------------------------------------------------------------

15.git revert <commitid> (very complicated,In Git, the revert command is used to create a new commit that undoes the changes you made to the prev commit.
 When you use revert, Git does not erase the previous commit; instead, it creates a new commit that effectively "undoes" the changes made by the previous commit.)

------------------------------------------------------------------------------------------------------

15. git checkout(Man this one is a jack of all trades. it can:)

lists:
 git checkout <branch-name>(Switch to an existing branch)
git checkout -b <new-branch-name>(make a new branch and switch to it)
git checkout <file-name>(discards all unstaged changes, can be used with {HEAD/--} to also revert the file back to prev commit, this will also unstage it)
git checkout .(the same with git restore)
git checkout <commitId> filename(restores file to the chosen commit's version)
git checkout <commitId> (Switches to old commit so now you have a detached head {time Travel})


---------------------------------------------------------------------------


